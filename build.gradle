import java.util.regex.Pattern;
import java.util.regex.Matcher;

allprojects {
  apply plugin: 'java'
  apply plugin: "jacoco"

  group = 'org.iconic'
  description = """Gene Expression"""

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  buildscript {
    repositories {
      mavenCentral()
    }
  }

  repositories {
    mavenCentral()
  }

  // Java 8 minimum
  compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
  }

  // Jupiter requires Java 8
  compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
  }

  test {
    useJUnitPlatform()
  }

  dependencies {
    testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version:'1.0.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.1.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.11.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
  }

  // JaCoCo relies on the test task's execution data by default so we need to point it at JUnit 5's task instead.
  // Note: we still rely on the test task as JUnit 5 aliases the test command
  task junitCodeCoverageReport(type: JacocoReport, dependsOn: test) {
    // Use the junitPlatformTest task as our execution data
    executionData test
    sourceSets sourceSets.main
  }

  // Run this task to display our test coverage.
  task coverage(dependsOn: junitCodeCoverageReport) {
    doLast {
      String output = new File('build/reports/jacoco/junitCodeCoverageReport/html/index.html').getText('UTF-8')
      Matcher matcher = Pattern.compile(/Total.*?([0-9]{1,3})%/).matcher(output);

      if (matcher.find()) {
        println matcher.group(0)
        .replaceAll("\\<[^>]*>", "|")
        .replaceAll("\\|\\|", " | ")
        .replaceAll("Total", "Total Coverage")
        .replaceAll("of", "missed statements out of")
      }
    }
  }

  task report(dependsOn: coverage) {
    doLast {
      exec {
        commandLine 'cmd', '/c', 'start', '/max', "build/reports/jacoco/junitCodeCoverageReport/html/index.html"
      }
    }
  }
}
